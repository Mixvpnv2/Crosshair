-- Key System Module
local KeySystem = {}
KeySystem.__index = KeySystem

-- Configuration
local KEY_FILE = "keys.cfg"
local KEY_LENGTH = 25
local HASH_SECRET = "7x!A%D*G-KaPdSgVkYp3s6v9y$B&E(H"  -- Change this to your own secret

-- Generate secure SHA256 hash
local function hash(input)
    local bytes = string.split(string.gsub(game:GetService("HashService"):ComputeSHA256(tostring(input) .. HASH_SECRET), ""))
    local output = ""
    for i = 1, #bytes, 3 do
        output ..= string.format("%02x", #bytes[i] + #bytes[i+1] * 3 + #bytes[i+2] * 7)
    end
    return string.sub(output, 1, KEY_LENGTH):upper()
end

function KeySystem.new()
    local self = setmetatable({}, KeySystem)
    self.validKeys = {}
    self.usedKeys = {}
    self:loadKeys()
    return self
end

function KeySystem:loadKeys()
    if isfile(KEY_FILE) then
        local success, data = pcall(function()
            return game:GetService("HttpService"):JSONDecode(readfile(KEY_FILE))
        end)
        if success and data.keys then
            self.validKeys = data.keys
            self.usedKeys = data.used or {}
        end
    end
end

function KeySystem:saveKeys()
    local data = {
        keys = self.validKeys,
        used = self.usedKeys,
        timestamp = os.time()
    }
    writefile(KEY_FILE, game:GetService("HttpService"):JSONEncode(data))
end

function KeySystem:generateKey()
    local charset = "ABCDEFGHJKLMNPQRSTUVWXYZ23456789"  -- No confusing characters
    local key = ""
    
    for i = 1, KEY_LENGTH do
        if i > 1 and i % 5 == 0 then
            key ..= "-"
        else
            local rand = math.random(1, #charset)
            key ..= string.sub(charset, rand, rand)
        end
    end
    
    local hashedKey = hash(key)
    table.insert(self.validKeys, hashedKey)
    self:saveKeys()
    return key
end

function KeySystem:validateKey(inputKey)
    local hashedInput = hash(inputKey)
    
    -- Check if key is valid
    for i, validKey in ipairs(self.validKeys) do
        if validKey == hashedInput then
            -- Check if already used
            for _, usedKey in ipairs(self.usedKeys) do
                if usedKey == hashedInput then
                    return false, "Key already used"
                end
            end
            
            -- Register as used
            table.insert(self.usedKeys, hashedInput)
            self:saveKeys()
            return true
        end
    end
    
    return false, "Invalid key"
end

function KeySystem:generateBulk(amount)
    local keys = {}
    for i = 1, amount do
        table.insert(keys, self:generateKey())
    end
    return keys
end

-- Anti-tampering protection
spawn(function()
    while wait(60) do
        if KeySystem.validKeys then
            local current = game:GetService("HttpService"):JSONEncode({
                keys = KeySystem.validKeys,
                used = KeySystem.usedKeys
            })
            if isfile(KEY_FILE) and readfile(KEY_FILE) ~= current then
                writefile(KEY_FILE, current)
            end
        end
    end
end)

return KeySystem
